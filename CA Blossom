
from linked_list import Node, LinkedList
from blossom_lib import flower_definitions

class HashMap:
  def __init__(self, size):
    #step 2.1
    self.array_size = size
    #step 2.2 // step 15
    self.array = [LinkedList() for i in range(size)]
    #self.array = [LinkedList() for i in range(self.array_size)]
    
  def hash (self, key):
    #self.key = key
    return (sum(key.encode()))
  
  def compress (self, hash_code):
    compression =  hash_code % self.array_size
    # WORKS print ('Compressed!')
    return compression
  
  def assign (self, key, value):
    hash_code = self.hash(key)
    array_index = self.compress(hash_code)
    print ('Hash code ' + str(hash_code) + ' and index ' + str(array_index) + ' assigned for ' + str(key))
    
    payload = Node([key, value])
    #STEP 15 Checking for existing key
    list_at_array = self.array[array_index]
    #PROBLEM:
    for item in list_at_array:
      if item[0] == key:
        print('Matching Key!')
        item[1] = value
        return  
    list_at_array.insert(payload)
    print('inserted!')
      

        
    
  def retrieve (self, key):
    hash_code = self.hash(key)
    print('Retrieve hash_code is ' + str(hash_code))
    array_index = self.compress(hash_code)
    
    list_at_index = self.array[array_index]
    for i in list_at_index:
      #print('Key usused in retrieve is ' + str(key))
      if i[0] == key:
        return (i[1]) 
    return 'Error in Retrieve'
      
  

blossom = HashMap (len(flower_definitions))

    
for flower in flower_definitions:
  blossom.assign(flower[0], flower[1])
 

daisy = blossom.retrieve('periwinkle')
print(daisy)
